#用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
#status=info
#dest=err
name=PropertiesConfig
# 定义变量。指定日志文件的位置和文件名称,以便记录多份日志时,直接引用
property.fileDir=./logs
property.fileName=console
property.filePath=${fileDir}/${fileName}.log
#日志文件内容的格式，说明：
#%d 输出日志时间点的日期或时间
#%t 输出产生该日志事件的线程名
#%l-输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#%p-日志级别(FATAL,ERROR,WARN...)
#%m-日志内容
#%n-换行
#%F-java源文件名
#%L-java源码行数
#%C-java类名
#%M-java方法名
property.layoutPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} %p %c %m%n
# rootLogger, 根记录器，所有记录器的父辈，只记录设定级别以上的日志，大小写无关
# 指定根日志的级别, (ALL<) TRACE < DEBUG < INFO < WARN < ERROR < FATAL (<OFF)
rootLogger.level=INFO
# appender引用
rootLogger.appenderRef.stdout.ref=Stdout
rootLogger.appenderRef.rolling.ref=InfoRollingFile
# Console 级别过滤（控制台过滤日志记录）
#appender.console.filter.threshold.type=ThresholdFilter
#appender.console.filter.threshold.level=error
# 指定输出源的类型与名称
appender.console.type=Console
appender.console.name=Stdout
appender.console.layout.type=PatternLayout
# 设置日志格式（输出模板）及颜色
#appender.console.layout.pattern=%highlight{%d{yyyy-MM-dd HH:mm:ss.SSS} [%5p] [%t] [%l] - %m%n}{FATAL=white, ERROR=red, WARN=blue, INFO=green, DEBUG=yellow, TRACE=blue}
appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{[%5p]} - %m%n{FATAL=white, ERROR=red, WARN=blue, INFO=green, DEBUG=yellow, TRACE=blue}
appender.console.layout.disableAnsi=false
appender.console.layout.noConsoleNoAnsi=false
# rolling file
appender.rolling.type=RollingFile
appender.rolling.name=InfoRollingFile
appender.rolling.fileName=${filePath}
# 指定当发生Rolling时，文件的转移和重命名规则
appender.rolling.filePattern=${fileDir}/${fileName}.%d{yyyyMMdd}.%i.log
appender.rolling.layout.type=PatternLayout
#appender.rolling.layout.pattern=%highlight{%d{yyyy-MM-dd HH:mm:ss.SSS} [%5p] [%t] [%l] - %m%n}{FATAL=white, ERROR=red, WARN=blue, INFO=green, DEBUG=yellow, TRACE=blue}
appender.rolling.layout.pattern=%highlight{%d{yyyy-MM-dd HH:mm:ss.SSS} [%5p] [%t] - %m%n}{FATAL=white, ERROR=red, WARN=blue, INFO=green, DEBUG=yellow, TRACE=blue}
# 指定记录文件的封存策略，该策略主要是完成周期性的日志文件封存工作
appender.rolling.policies.type=Policies
# 基于时间的触发策略
appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
# 当前记录周期为每1h生成一个文件
appender.rolling.policies.time.interval=1
appender.rolling.policies.time.modulate=true
# 基于日志文件体积的触发策略
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
# 当日志文件体积大于size指定的值时，触发Rolling
appender.rolling.policies.size.size=1M
# 文件封存的覆盖策略
appender.rolling.strategy.type=DefaultRolloverStrategy
# 生成分割（封存）文件的个数，默认为5(-1,-2,-3,-4,-5)
appender.rolling.strategy.max=100